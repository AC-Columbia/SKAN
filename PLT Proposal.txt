SKAN Language Proposal
Scott Lukas (System Architect)
Katie Brady (Tester)
Alex Cohen (Manager)
Nick Cancar (Language Guru)




Motivation


The motivation for our project is to create a language that is designed to manipulate images. We want to create a dynamically typed language with an imperative design that allows programs to operate on multidimensional arrays and matrices in order to alter, combine, or filter images. We want to combine functionality and efficiency so that the programmer has the ability to create their own or use a built-in function to efficiently alter and process an image.
A key example of this would be taking the double gradient of all the pixel intensities in an x-ray picture and adding that to the original image in order to exaggerate the edges to create a sharper rendering.
In terms of syntax, we want to combine elements of C, Java, and Python to increase the readability and clarity of programs. SKAN will also be weakly and dynamically typed, which will allow for interesting operations to be performed on images. Rather than stop the user from performing an operation on an image, this will allow them to try unconventional functions that alter images in various ways.




Paradigms and Features


Skan will be an imperative language that is weakly, dynamically typed and statically scoped. It will also have strict evaluation order and will be modeled after a combination of C, Java, and Python. 
Skan will have higher order functions and anonymous functions to allow functions to be easily used, called, and returned in other functions. Furthermore, as Skan will be dealing with pictures from a variety of file locations, we will need to implement I/O capability in order to load/write images to/from locally sourced file locations. Skan will do this by utilizing OCaml’s I/O system to read/write files to channels. An example of how we could code I/O capabilities: 
# let ic = open_in "/etc/motd" and oc = open_out "/tmp/feh";;
Resource: https://www2.lib.uchicago.edu/keith/ocaml-class/io.html




“Hello World” Program


main {
Image cute_dog = load_image(“./mycutedog.png”);
print_image(cute_dog);
}




“Language in One Slide” Program


The example program applies several imaging processing techniques seamlessly to an image and displays the output image. It initially reads in the `lion` image and brightens it by applying a brightening function 3 times. It then reads and applies a mask image to the `lion` image, which removes portions of content from the image. Lastly, it writes and saves the `lion_new` image to a file before printing it.


main {
Image lion = load_image(“./lion.png”);


$$ function that brightens each pixel by 5. Weakly typed $$
function increase x = {return x+5};
function apply_3(f, x) = {
return  f(f(f(x)));
}


$$ brighten image by 5 three times $$
lion_new = apply_3(increase, lion);


Image mask = load_image(“./mask.png”);
lion = lion * mask; $$ apply mask image to lion image $$


write_image(lion_new, “./lion_new.png”); $$ write image to
lion_new.png file $$


print_image(lion_new);
}
________________


Scrap and stuff


* Link to Proposal Guidelines
* Sample Proposal
* Suggested Projects/Ideas




1. Decide roles:
   * Manager- Timely completion of deliverables
      1. Alex
   * Language Guru- Language design
      1. Nick
   * System Architect- Compiler architecture, development environment
      1. Scott
   * Tester- Test plan, test suites
      1. Katie


2. Decide best day to meet weekly
   * Mondays or Wednesdays at 8pm-ish
   * Sunday as backup




Notes:


* Readable
   * Don’t know how to code can start
* Python
* Java
* No pointers
* Strict order
* Large data
* Matrices
* Motivation- focus on one thing and improve one aspect
* Music
* Everyday things
* Planning schedule
* IoT- everything happens at once/planned/commands for different things
* Art
* Image processing- easy, simple
   * Subtract/add/convolve two images
   * Make a negative
   * Operators
   * Type names
   * Lists
      * Apply operators on lists
      * Take png
         * N-tuple array
   * Sample program
   * Weakly typed- end up with wacky image but not bad
   * C language
   * RGB to Grayscale image
   * Laplacian filters, gaussian filters, masks
   * Higher order functions
      * Image manipulation
   * Concurrency
   * Pixelate
   * + operator
      * Add to image- brightness
      * Pixel to pixel- add colors
      * Weakly typed


Similar Projects:


http://www.cs.columbia.edu/~sedwards/classes/2017/4115-fall/proposals/pixelman.pdf
http://www.cs.columbia.edu/~sedwards/classes/2017/4115-fall/index.html
http://www.cs.columbia.edu/~sedwards/classes/2017/4115-fall/proposals/PIXL.pdf
http://www.cs.columbia.edu/~sedwards/classes/2017/4115-fall/proposals/PixMix.pdf




High order in python:
https://www.hackerearth.com/practice/python/functional-programming/higher-order-functions-and-decorators/tutorial/